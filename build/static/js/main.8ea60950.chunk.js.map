{"version":3,"sources":["winLogo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyles","createGlobalStyle","ms_sans_serif","ms_sans_serif_bold","styleReset","App","useState","galleryList","setGalleryList","open","setOpen","Date","toLocaleString","hour","minute","hour12","currentTime","setCurrentTime","forceUpdate","setValue","value","useForceUpdate","isInfoClosed","setInfoClosed","gallery","artists","useEffect","fetchImagesByUsernames","interval","setInterval","console","log","clearInterval","usernames","forEach","username","ig","scrapeUserPage","then","result","medias","map","el","push","className","theme","original","style","minHeight","display","onClick","content","index","key","href","target","splice","closeArtWindow","src","display_url","width","height","bottom","position","zIndex","justifyContent","active","fontWeight","winLogo","alt","marginRight","left","disabled","artist","role","aria-label","variant","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ea60950.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/winLogo.965be2a2.png\";","import React, { useState, useEffect } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport ig from 'instagram-scraping';\nimport {\n  styleReset,\n  Window,\n  WindowContent,\n  WindowHeader,\n  Button,\n  AppBar,\n  Toolbar,\n  List,\n  ListItem,\n  Divider,\n  Panel\n} from 'react95';\n// pick a theme of your choice\nimport original from \"react95/dist/themes/original\";\n// original Windows95 font (optionally)\nimport ms_sans_serif from \"react95/dist/fonts/ms_sans_serif.woff2\";\nimport ms_sans_serif_bold from \"react95/dist/fonts/ms_sans_serif_bold.woff2\";\nimport './App.scss';\nimport winLogo from './winLogo.png'\n\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif}') format('woff2');\n    font-weight: 400;\n    font-style: normal\n  }\n  @font-face {\n    font-family: 'ms_sans_serif';\n    src: url('${ms_sans_serif_bold}') format('woff2');\n    font-weight: bold;\n    font-style: normal\n  }\n  body {\n    font-family: 'ms_sans_serif';\n  }\n  ${styleReset}\n`;\n\n//update hook\n// Workaround to handle the slow image scraper.\nfunction useForceUpdate() {\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => ++value); // update the state to force render\n}\n\nfunction App() {\n\n  const [galleryList, setGalleryList] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [currentTime, setCurrentTime] = useState(new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }));\n  const forceUpdate = useForceUpdate();\n  const [isInfoClosed, setInfoClosed] = useState(false)\n\n  let gallery = [];\n  const artists = [\"crimsondawn97\", \"floatingheavy\", \"lofi.icon\", \"seerlight\", \"depression_vaporwave\", \"shapesoftime\", \"vapor_waveart\"]\n\n  useEffect(() => {\n    fetchImagesByUsernames(artists);\n    const interval = setInterval(() => {\n      setCurrentTime(new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }));\n      setGalleryList(gallery);\n      forceUpdate();\n      console.log(\"gallery updated\")\n    }, 1);\n    return () => clearInterval(interval);\n\n  }, []);\n\n\n  const fetchImagesByUsernames = (usernames) => {\n    usernames.forEach(username => {\n      ig.scrapeUserPage(username).then(result => {\n        if (result) {\n          result.medias.map(el => {\n            el.username = username\n            gallery.push(el);\n          })\n        }\n      });\n\n    })\n  }\n\n  const closeArtWindow = (index) => {\n    console.log(index)\n    setGalleryList(galleryList.splice(index,1));\n    console.log(galleryList[index])\n  }\n\n  const closeInfo = () => {\n    setInfoClosed(true);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <GlobalStyles />\n      <ThemeProvider theme={original}>\n        <>\n        <div style={{minHeight: \"100vh\"}}>\n          <Window className='window-info' style={isInfoClosed ? {display: \"none\"} : {}}>\n            <WindowHeader className='window-header'>\n              <span className=\"headerSpan\">VaporwaveGallery.exe</span>\n\n              <Button className=\"closeBtn\" onClick={() => closeInfo()}>\n                <div className=\"closeIconLeft\">\n                  <div className=\"closeIconRight\"></div>\n                </div>\n              </Button>\n            </WindowHeader>\n\n            <WindowContent className=\"infoContent\">\n              <p>\n                Welcome to Vaporwave Gallery!\n             </p>\n              <p>A digital art gallery with a vaporwave aesthetic.</p>\n            </WindowContent>\n          </Window>\n          <br />\n\n          {galleryList.map((content, index) => {\n            return (\n              <Window className='window' key={index}>\n                <WindowHeader className='window-header'>\n                  <a href={`https://www.instagram.com/${content.username}/`} target=\"_blank\">\n                    <span className=\"headerSpan\">{content.username}.jpg</span>\n                  </a>\n                  <Button className=\"closeBtn\" onClick={() => closeArtWindow(index)}>\n                    <div className=\"closeIconLeft\">\n                      <div className=\"closeIconRight\"></div>\n                    </div>\n                  </Button>\n\n                </WindowHeader>\n\n                <WindowContent>\n                  <img src={content.display_url} width=\"100%\" height=\"100%\" />\n                </WindowContent>\n              </Window>\n\n            )\n          })}\n          </div>\n          <AppBar style={{ bottom: \"0%\", position: \"sticky\", width: \"100%\", zIndex: 99 }}>\n            <Toolbar style={{ justifyContent: 'space-between' }}>\n              <div style={{ position: 'relative', display: 'inline-block' }}>\n                <Button\n                  onClick={() => setOpen(!open)}\n                  active={open}\n                  style={{ fontWeight: 'bold' }}\n                >\n                  <img\n                    src={winLogo}\n                    alt=''\n                    style={{ height: '20px', marginRight: 4 }}\n                  />\n            Start\n          </Button>\n                {open && (\n                  <List\n                    style={{\n                      position: 'absolute',\n                      left: '0',\n                      bottom: '100%'\n                    }}\n                    onClick={() => setOpen(false)}\n                  >\n                    <ListItem disabled>Check Out The Artists</ListItem>\n                    <Divider />\n\n                    {artists.map((artist, index) => {\n                      return (\n                        <a key={index} href={`https://www.instagram.com/${artist}/`} target=\"_blank\">\n                          <ListItem>\n                            <span role='img' aria-label='📁' style={{marginRight: \"2px\"}}>\n                            📁\n                          </span>\n                            {artist}\n                          </ListItem>\n                        </a>\n                      )\n                    })}\n                    <Divider />\n                    <a href=\"https://github.com/femisd\" target=\"_blank\">\n                      <ListItem>\n                        <span role='img' aria-label='💻'>\n                        ⚙️\n                          </span>\n                          My Github\n                        </ListItem>\n                    </a>\n\n                    <ListItem disabled>\n                      <span role='img' aria-label='🖥️'>\n                      🖥️\n                </span>\n                Logout\n              </ListItem>\n                  </List>\n                )}\n              </div>\n\n              <Panel variant='well' style={{ padding: \"5px\" }}>\n                {currentTime}\n              </Panel>\n            </Toolbar>\n          </AppBar>\n        </>\n      </ThemeProvider>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}